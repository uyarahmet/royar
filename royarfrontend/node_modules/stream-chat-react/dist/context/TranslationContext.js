var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { useContext } from 'react';
import Dayjs from 'dayjs';
import calendar from 'dayjs/plugin/calendar';
import localizedFormat from 'dayjs/plugin/localizedFormat';
import { getDisplayName } from './utils/getDisplayName';
Dayjs.extend(calendar);
Dayjs.extend(localizedFormat);
export var isDayOrMoment = function (output) {
    return output.isSame != null;
};
export var isDate = function (output) {
    return output.getMonth != null;
};
export var isNumberOrString = function (output) {
    return typeof output === 'string' || typeof output === 'number';
};
export var TranslationContext = React.createContext({
    t: function (key) { return key; },
    tDateTimeParser: function (input) { return Dayjs(input); },
    userLanguage: 'en',
});
export var TranslationProvider = function (_a) {
    var children = _a.children, value = _a.value;
    return (React.createElement(TranslationContext.Provider, { value: value }, children));
};
export var useTranslationContext = function () { return useContext(TranslationContext); };
export var withTranslationContext = function (Component) {
    var WithTranslationContextComponent = function (props) {
        var translationContext = useTranslationContext();
        return React.createElement(Component, __assign({}, props, translationContext));
    };
    WithTranslationContextComponent.displayName = "WithTranslationContext" + getDisplayName(Component);
    return WithTranslationContextComponent;
};
