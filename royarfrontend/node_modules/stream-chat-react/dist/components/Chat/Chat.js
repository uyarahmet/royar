import React from 'react';
import { useChat } from './hooks/useChat';
import { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';
import { ChatProvider } from '../../context/ChatContext';
import { TranslationProvider } from '../../context/TranslationContext';
/**
 * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components
 * as it provides the ChatContext.
 */
export var Chat = function (props) {
    var children = props.children, client = props.client, customStyles = props.customStyles, _a = props.darkMode, darkMode = _a === void 0 ? false : _a, i18nInstance = props.i18nInstance, _b = props.initialNavOpen, initialNavOpen = _b === void 0 ? true : _b, _c = props.theme, theme = _c === void 0 ? 'messaging light' : _c, _d = props.useImageFlagEmojisOnWindows, useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;
    var _e = useChat({ client: client, i18nInstance: i18nInstance, initialNavOpen: initialNavOpen }), channel = _e.channel, closeMobileNav = _e.closeMobileNav, mutes = _e.mutes, navOpen = _e.navOpen, openMobileNav = _e.openMobileNav, setActiveChannel = _e.setActiveChannel, translators = _e.translators;
    useCustomStyles(darkMode ? darkModeTheme : customStyles);
    if (!translators.t)
        return null;
    return (React.createElement(ChatProvider, { value: {
            channel: channel,
            client: client,
            closeMobileNav: closeMobileNav,
            mutes: mutes,
            navOpen: navOpen,
            openMobileNav: openMobileNav,
            setActiveChannel: setActiveChannel,
            theme: theme,
            useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,
        } },
        React.createElement(TranslationProvider, { value: translators }, children)));
};
