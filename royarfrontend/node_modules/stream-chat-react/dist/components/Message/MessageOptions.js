import React from 'react';
import { ReactionIcon, ThreadIcon } from './icons';
import { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';
import { MessageActions } from '../MessageActions';
import { useMessageContext } from '../../context/MessageContext';
var UnMemoizedMessageOptions = function (props) {
    var _a = props.displayLeft, displayLeft = _a === void 0 ? true : _a, _b = props.displayReplies, displayReplies = _b === void 0 ? true : _b, propHandleOpenThread = props.handleOpenThread, messageWrapperRef = props.messageWrapperRef, _c = props.theme, theme = _c === void 0 ? 'simple' : _c;
    var _d = useMessageContext(), getMessageActions = _d.getMessageActions, contextHandleOpenThread = _d.handleOpenThread, initialMessage = _d.initialMessage, isMyMessage = _d.isMyMessage, message = _d.message, onReactionListClick = _d.onReactionListClick, threadList = _d.threadList;
    var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;
    var messageActions = getMessageActions();
    var showActionsBox = showMessageActionsBox(messageActions);
    var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;
    var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;
    if (!message.type ||
        message.type === 'error' ||
        message.type === 'system' ||
        message.type === 'ephemeral' ||
        message.status === 'failed' ||
        message.status === 'sending' ||
        initialMessage) {
        return null;
    }
    if (isMyMessage() && displayLeft) {
        return (React.createElement("div", { className: "str-chat__message-" + theme + "__actions", "data-testid": 'message-options-left' },
            showActionsBox && React.createElement(MessageActions, { messageWrapperRef: messageWrapperRef }),
            shouldShowReplies && (React.createElement("div", { className: "str-chat__message-" + theme + "__actions__action str-chat__message-" + theme + "__actions__action--thread", "data-testid": 'thread-action', onClick: handleOpenThread },
                React.createElement(ThreadIcon, null))),
            shouldShowReactions && (React.createElement("div", { className: "str-chat__message-" + theme + "__actions__action str-chat__message-" + theme + "__actions__action--reactions", "data-testid": 'message-reaction-action', onClick: onReactionListClick },
                React.createElement(ReactionIcon, null)))));
    }
    return (React.createElement("div", { className: "str-chat__message-" + theme + "__actions", "data-testid": 'message-options' },
        shouldShowReactions && (React.createElement("div", { className: "str-chat__message-" + theme + "__actions__action str-chat__message-" + theme + "__actions__action--reactions", "data-testid": 'message-reaction-action', onClick: onReactionListClick },
            React.createElement(ReactionIcon, null))),
        shouldShowReplies && (React.createElement("div", { className: "str-chat__message-" + theme + "__actions__action str-chat__message-" + theme + "__actions__action--thread", "data-testid": 'thread-action', onClick: handleOpenThread },
            React.createElement(ThreadIcon, null))),
        showActionsBox && React.createElement(MessageActions, { messageWrapperRef: messageWrapperRef })));
};
export var MessageOptions = React.memo(UnMemoizedMessageOptions);
