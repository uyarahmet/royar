import React from 'react';
import type { EmojiData, NimbleEmojiIndex } from 'emoji-mart';
import type { FileLike } from 'react-file-utils';
import type { Attachment, UserResponse } from 'stream-chat';
import type { MessageInputProps } from '../MessageInput';
import type { CustomTrigger, DefaultAttachmentType, DefaultChannelType, DefaultMessageType, DefaultUserType } from '../../../types/types';
export declare type FileUpload = {
    file: {
        name: string;
        size?: number | string;
        type?: string;
        uri?: string;
    };
    id: string;
    state: 'finished' | 'failed' | 'uploading';
    url?: string;
};
export declare type ImageUpload = {
    file: {
        height?: number;
        name?: string;
        uri?: string;
        width?: number;
    };
    id: string;
    state: 'finished' | 'failed' | 'uploading';
    previewUri?: string;
    url?: string;
};
export declare type MessageInputState<At extends DefaultAttachmentType = DefaultAttachmentType, Us extends DefaultUserType<Us> = DefaultUserType> = {
    attachments: Attachment<At>[];
    emojiPickerIsOpen: boolean;
    fileOrder: string[];
    fileUploads: {
        [id: string]: FileUpload;
    };
    imageOrder: string[];
    imageUploads: {
        [id: string]: ImageUpload;
    };
    mentioned_users: UserResponse<Us>[];
    text: string;
};
declare type SetEmojiPickerIsOpenAction = {
    type: 'setEmojiPickerIsOpen';
    value: boolean;
};
declare type SetTextAction = {
    getNewText: (currentStateText: string) => string;
    type: 'setText';
};
declare type ClearAction = {
    type: 'clear';
};
declare type SetImageUploadAction = {
    id: string;
    type: 'setImageUpload';
    file?: File | FileLike;
    previewUri?: string;
    state?: string;
    url?: string;
};
declare type SetFileUploadAction = {
    id: string;
    type: 'setFileUpload';
    file?: File;
    state?: string;
    url?: string;
};
declare type RemoveImageUploadAction = {
    id: string;
    type: 'removeImageUpload';
};
declare type RemoveFileUploadAction = {
    id: string;
    type: 'removeFileUpload';
};
declare type AddMentionedUserAction<Us extends DefaultUserType<Us> = DefaultUserType> = {
    type: 'addMentionedUser';
    user: UserResponse<Us>;
};
export declare type MessageInputReducerAction<Us extends DefaultUserType<Us> = DefaultUserType> = SetEmojiPickerIsOpenAction | SetTextAction | ClearAction | SetImageUploadAction | SetFileUploadAction | RemoveImageUploadAction | RemoveFileUploadAction | AddMentionedUserAction<Us>;
export declare type MessageInputHookProps<Us extends DefaultUserType<Us> = DefaultUserType> = {
    closeEmojiPicker: React.MouseEventHandler<HTMLElement>;
    emojiPickerRef: React.MutableRefObject<HTMLDivElement | null>;
    handleChange: React.ChangeEventHandler<HTMLTextAreaElement>;
    handleEmojiKeyDown: React.KeyboardEventHandler<HTMLSpanElement>;
    handleSubmit: (event: React.BaseSyntheticEvent) => void;
    insertText: (textToInsert: string) => void;
    isUploadEnabled: boolean;
    maxFilesLeft: number;
    numberOfUploads: number;
    onPaste: (event: React.ClipboardEvent<HTMLTextAreaElement>) => void;
    onSelectEmoji: (emoji: EmojiData) => void;
    onSelectUser: (item: UserResponse<Us>) => void;
    openEmojiPicker: React.MouseEventHandler<HTMLSpanElement>;
    removeFile: (id: string) => void;
    removeImage: (id: string) => void;
    textareaRef: React.MutableRefObject<HTMLTextAreaElement | undefined>;
    uploadFile: (id: string) => void;
    uploadImage: (id: string) => void;
    uploadNewFiles: (files: FileList | File[]) => void;
    emojiIndex?: NimbleEmojiIndex;
};
/**
 * hook for MessageInput state
 */
export declare const useMessageInputState: <At extends DefaultAttachmentType = DefaultAttachmentType, Ch extends DefaultChannelType = DefaultChannelType, Co extends import("stream-chat").LiteralStringForUnion = import("stream-chat").LiteralStringForUnion, Ev extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Me extends DefaultMessageType = DefaultMessageType, Re extends import("../../../types/types").UnknownType = import("../../../types/types").UnknownType, Us extends DefaultUserType<Us> = DefaultUserType<import("../../../types/types").DefaultUserTypeInternal>, V extends CustomTrigger = CustomTrigger>(props: MessageInputProps<At, Ch, Co, Ev, Me, Re, Us, V>) => MessageInputState<At, Us> & MessageInputHookProps<Us>;
export {};
//# sourceMappingURL=useMessageInputState.d.ts.map