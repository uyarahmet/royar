import React, { useEffect, useState } from 'react';
import { useChatContext } from '../../../context/ChatContext';
import { useChannelStateContext } from '../../../context/ChannelStateContext';
export var CooldownTimer = function (props) {
    var cooldownInterval = props.cooldownInterval, setCooldownRemaining = props.setCooldownRemaining;
    var _a = useState(cooldownInterval), seconds = _a[0], setSeconds = _a[1];
    useEffect(function () {
        var countdownInterval = setInterval(function () {
            if (seconds > 0) {
                setSeconds(seconds - 1);
            }
            else {
                setCooldownRemaining(0);
            }
        }, 1000);
        return function () { return clearInterval(countdownInterval); };
    });
    return React.createElement("div", null, seconds === 0 ? null : seconds);
};
export var useCooldownTimer = function () {
    var client = useChatContext().client;
    var channel = useChannelStateContext().channel;
    var cooldownInterval = (channel.data || {}).cooldown;
    var _a = useState(), cooldownRemaining = _a[0], setCooldownRemaining = _a[1];
    useEffect(function () {
        var handleEvent = function (event) {
            var _a;
            if (((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === client.userID) {
                setCooldownRemaining(cooldownInterval);
            }
        };
        if (cooldownInterval)
            channel.on('message.new', handleEvent);
        return function () { return channel.off('message.new', handleEvent); };
    }, [channel.id, cooldownInterval]);
    return { cooldownInterval: cooldownInterval || 0, cooldownRemaining: cooldownRemaining, setCooldownRemaining: setCooldownRemaining };
};
