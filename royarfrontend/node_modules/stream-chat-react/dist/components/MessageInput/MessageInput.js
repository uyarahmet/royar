var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from 'react';
import { DefaultTriggerProvider } from './DefaultTriggerProvider';
import { MessageInputFlat } from './MessageInputFlat';
import { useCooldownTimer } from './hooks/useCooldownTimer';
import { useMessageInputState } from './hooks/useMessageInputState';
import { MessageInputContextProvider } from '../../context/MessageInputContext';
import { useComponentContext } from '../../context/ComponentContext';
var UnMemoizedMessageInput = function (props) {
    var PropInput = props.Input;
    var _a = useComponentContext(), ContextInput = _a.Input, _b = _a.TriggerProvider, TriggerProvider = _b === void 0 ? DefaultTriggerProvider : _b;
    var Input = PropInput || ContextInput || MessageInputFlat;
    var messageInputState = useMessageInputState(__assign(__assign({}, props), { additionalTextareaProps: props.additionalTextareaProps || {}, disabled: props.disabled || false, focus: props.focus || false, grow: props.grow || true, maxRows: props.maxRows || 10, publishTypingEvent: props.publishTypingEvent || true }));
    var cooldownTimerState = useCooldownTimer();
    var messageInputContextValue = __assign(__assign(__assign({}, cooldownTimerState), messageInputState), props);
    return (React.createElement(MessageInputContextProvider, { value: messageInputContextValue },
        React.createElement(TriggerProvider, null,
            React.createElement(Input, null))));
};
/**
 * A high level component that has provides all functionality to the Input it renders.
 */
export var MessageInput = React.memo(UnMemoizedMessageInput);
