// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"grouped-endless-scrolling.tsx":[function(require,module,exports) {
"use strict";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  Object.defineProperty(o, k2, {
    enumerable: true,
    get: function get() {
      return m[k];
    }
  });
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});

var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  }

  __setModuleDefault(result, mod);

  return result;
};

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var React = __importStar(require("react"));

var src_1 = require("../src");

var react_1 = require("react");

var faker_1 = __importDefault(require("faker"));

var lodash_1 = require("lodash");

var getUser = function getUser() {
  var firstName = faker_1.default.name.firstName();
  var lastName = faker_1.default.name.lastName();
  return {
    name: firstName + " " + lastName,
    initials: "" + firstName.substr(0, 1) + lastName.substr(0, 1),
    description: faker_1.default.company.catchPhrase(),
    avatar: faker_1.default.internet.avatar()
  };
};

var sortUser = function sortUser(a, b) {
  if (a.name < b.name) {
    return -1;
  }

  if (a.name > b.name) {
    return 1;
  }

  return 0;
};

var useGroupedUsers = function useGroupedUsers(count) {
  var allUsers = react_1.useMemo(function () {
    return Array.from({
      length: count
    }, getUser).sort(sortUser);
  }, [count]);
  var loadedCount = react_1.useRef(0);
  var loadedUsers = react_1.useRef([]);
  var groups = react_1.useRef([]);

  var _a = react_1.useState(false),
      endReached = _a[0],
      setEndReached = _a[1];

  var _b = react_1.useState([]),
      groupCounts = _b[0],
      setGroupCounts = _b[1];

  var loadMore = react_1.useCallback(function () {
    if (!endReached) {
      setTimeout(function () {
        loadedCount.current += 50; // in a real world scenario, you would fetch the next
        // slice and append it to the existing records

        loadedUsers.current = allUsers.slice(0, loadedCount.current); // the code below calculates the group counts
        // for the users loaded so far;
        // this should be performed on the server too

        var groupedUsers = lodash_1.groupBy(loadedUsers.current, function (user) {
          return user.name[0];
        });
        groups.current = Object.keys(groupedUsers);
        setGroupCounts(Object.values(groupedUsers).map(function (users) {
          return users.length;
        }));

        if (loadedCount.current === count) {
          setEndReached(true);
        }
      }, 30);
    }
  }, [allUsers, endReached, count]);
  return {
    loadMore: loadMore,
    endReached: endReached,
    groupCounts: groupCounts,
    users: loadedUsers.current,
    groups: groups.current
  };
};

var components = {
  Footer: function Footer() {
    return /*#__PURE__*/React.createElement("div", null, "Footer");
  },
  List: React.forwardRef(function (_a, listRef) {
    var style = _a.style,
        children = _a.children;
    return /*#__PURE__*/React.createElement("div", {
      ref: listRef,
      style: style
    }, children);
  }),
  Item: function Item(_a) {
    var children = _a.children,
        props = __rest(_a, ["children"]);

    return /*#__PURE__*/React.createElement("div", _extends({}, props, {
      style: {
        margin: 0
      }
    }), children);
  },
  Group: function Group(_a) {
    var children = _a.children,
        props = __rest(_a, ["children"]);

    return /*#__PURE__*/React.createElement("div", props, children);
  }
};
var Style = {
  height: '350px',
  width: '300px'
};

function App() {
  var _a = useGroupedUsers(12500),
      loadMore = _a.loadMore,
      groupCounts = _a.groupCounts,
      users = _a.users,
      groups = _a.groups;

  console.log(groupCounts);
  react_1.useEffect(loadMore, [loadMore]);
  return /*#__PURE__*/React.createElement(src_1.GroupedVirtuoso, {
    components: components,
    style: Style,
    groupCounts: groupCounts,
    groupContent: function groupContent(index) {
      return /*#__PURE__*/React.createElement("div", null, "Group ", groups[index]);
    },
    overscan: 400,
    endReached: function endReached(_) {
      loadMore();
    },
    itemContent: function itemContent(index) {
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("strong", null, users[index].name)), /*#__PURE__*/React.createElement("div", null, users[index].description, users[index].description));
    }
  });
}

exports.default = App;
},{"react":"../node_modules/react/index.js","../src":"../src/index.tsx","faker":"../node_modules/faker/index.js","lodash":"../node_modules/lodash/lodash.js"}]},{},[], null)