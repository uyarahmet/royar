{"ast":null,"code":"var _jsxFileName = \"/Users/ahmet/Desktop/royar/src/App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport Navbar from './Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport './css/main.css';\nimport SlideShow from './SlideShow';\nimport SearchAndBackground from './SearchAndBackground';\nimport ActionMenu from './ActionMenu';\nimport Contact from './Contact';\nimport Footer from './Footer';\nimport { Chat } from 'stream-chat-react';\nimport { StreamChat } from 'stream-chat';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useState } from 'react';\nimport 'stream-chat-react/dist/css/index.css';\nimport './App.css';\nimport { AgentApp } from './AgentApp';\nimport JenAvatar from './assets/jen-avatar.png';\nimport KevinAvatar from './assets/kevin-avatar.png';\nimport User1 from './assets/user1.png';\nimport { AgentHeader } from './components/AgentHeader/AgentHeader';\nimport { AgentLoading } from './components/AgentLoading/AgentLoading';\nimport { useChecklist } from './ChecklistTasks';\nimport { CustomerApp } from './CustomerApp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst urlParams = new URLSearchParams(window.location.search);\nconst apiKey = urlParams.get('apikey') || process.env.REACT_APP_STREAM_KEY;\nconst agentChannelId = `agent-demo-${uuidv4()}`;\nconst customerChannelId = `customer-demo-${uuidv4()}`;\nconst targetOrigin = urlParams.get('target_origin') || process.env.REACT_APP_TARGET_ORIGIN;\nconst theme = 'light';\nconst previousUserId = urlParams.get('user1') || process.env.REACT_APP_PREVIOUS_ID;\nconst previousUserToken = urlParams.get('user1_token') || process.env.REACT_APP_PREVIOUS_TOKEN;\nconst agentUserId = urlParams.get('user2') || process.env.REACT_APP_AGENT_ID;\nconst agentUserToken = urlParams.get('user2_token') || process.env.REACT_APP_AGENT_TOKEN;\nconst customerUserId = urlParams.get('user3') || process.env.REACT_APP_CUSTOMER_ID;\nconst customerUserToken = urlParams.get('user3_token') || process.env.REACT_APP_CUSTOMER_TOKEN;\nconst customerClient = StreamChat.getInstance(apiKey);\ncustomerClient.connectUser({\n  id: customerUserId,\n  name: 'Kevin Rosen',\n  image: KevinAvatar,\n  phone: '+1 (303) 555-1212',\n  email: 'kevin@example.com'\n}, customerUserToken);\nexport default function App() {\n  _s();\n\n  const [agentClient, setAgentClient] = useState();\n  const [initialClient, setInitialClient] = useState();\n  const [initialChannel, setInitialChannel] = useState();\n  /**\n   * Creates and watches a channel with a mock customer as the user\n   */\n\n  useEffect(() => {\n    const getInitialChannel = async () => {\n      const client = new StreamChat(apiKey); // since app is dual client need to construct an additional instance\n\n      await client.connectUser({\n        id: previousUserId,\n        name: 'Jen Alexander',\n        image: JenAvatar,\n        phone: '+1 (720) 555-1525',\n        email: 'jen@example.com',\n        role: 'moderator'\n      }, previousUserToken);\n      setInitialClient(client);\n      const newChannel = await client.channel('commerce', agentChannelId, {\n        image: JenAvatar,\n        name: 'Jen Alexander',\n        issue: 'Enterprise Inquiry',\n        subtitle: '#572 Enterprise Inquiry'\n      });\n\n      if (newChannel.state.messages.length) {\n        newChannel.state.clearMessages();\n      }\n\n      await newChannel.watch();\n      setInitialChannel(newChannel);\n    };\n\n    getInitialChannel();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * Sends messages to mock channel, disconnects mock channel, and sets\n   * support agent as current user\n   */\n\n  useEffect(() => {\n    const sendMessages = async () => {\n      await initialChannel.sendMessage({\n        text: 'I have a question about Enterprise'\n      });\n      await initialChannel.sendMessage({\n        text: 'My company is looking to upgrade our account to Enterprise. Can you provide me with some additional pricing information?'\n      });\n      await initialChannel.stopWatching();\n      await initialClient.disconnect();\n      const client = new StreamChat(apiKey); // since app is dual client need to construct an additional instance\n\n      await client.connectUser({\n        id: agentUserId,\n        name: 'Daniel Smith',\n        image: User1\n      }, agentUserToken);\n      const [existingChannel] = await client.queryChannels({\n        id: agentChannelId\n      });\n      await existingChannel.watch();\n      setAgentClient(client);\n    };\n\n    if (initialChannel && !initialChannel.state.messages.length) {\n      sendMessages();\n    }\n  }, [initialChannel]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useChecklist(customerClient, targetOrigin);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchAndBackground, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SlideShow, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"agent-wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(AgentHeader, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 9\n        }, this), agentClient ? /*#__PURE__*/_jsxDEV(Chat, {\n          client: agentClient,\n          children: /*#__PURE__*/_jsxDEV(AgentApp, {\n            agentChannelId,\n            customerChannelId\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this) : /*#__PURE__*/_jsxDEV(AgentLoading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }, this), customerClient && /*#__PURE__*/_jsxDEV(Chat, {\n        client: customerClient,\n        theme: `commerce ${theme}`,\n        children: /*#__PURE__*/_jsxDEV(CustomerApp, {\n          customerChannelId\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Contact, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), \"}\", /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"HZGjDeDBjzwmLRvvDRIXH1Ktr0Y=\", false, function () {\n  return [useChecklist];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ahmet/Desktop/royar/src/App.js"],"names":["Navbar","SlideShow","SearchAndBackground","ActionMenu","Contact","Footer","Chat","StreamChat","v4","uuidv4","useState","AgentApp","JenAvatar","KevinAvatar","User1","AgentHeader","AgentLoading","useChecklist","CustomerApp","urlParams","URLSearchParams","window","location","search","apiKey","get","process","env","REACT_APP_STREAM_KEY","agentChannelId","customerChannelId","targetOrigin","REACT_APP_TARGET_ORIGIN","theme","previousUserId","REACT_APP_PREVIOUS_ID","previousUserToken","REACT_APP_PREVIOUS_TOKEN","agentUserId","REACT_APP_AGENT_ID","agentUserToken","REACT_APP_AGENT_TOKEN","customerUserId","REACT_APP_CUSTOMER_ID","customerUserToken","REACT_APP_CUSTOMER_TOKEN","customerClient","getInstance","connectUser","id","name","image","phone","email","App","agentClient","setAgentClient","initialClient","setInitialClient","initialChannel","setInitialChannel","useEffect","getInitialChannel","client","role","newChannel","channel","issue","subtitle","state","messages","length","clearMessages","watch","sendMessages","sendMessage","text","stopWatching","disconnect","existingChannel","queryChannels"],"mappings":"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","sourcesContent":["import './App.css';\nimport Navbar from './Navbar'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.min.js';\nimport './css/main.css';\nimport SlideShow from './SlideShow'\nimport SearchAndBackground from './SearchAndBackground'\nimport ActionMenu from './ActionMenu'\nimport Contact from './Contact'\nimport Footer from './Footer'\nimport { Chat } from 'stream-chat-react';\nimport { StreamChat } from 'stream-chat';\nimport { v4 as uuidv4 } from 'uuid';\nimport {useState} from 'react'\n\nimport 'stream-chat-react/dist/css/index.css';\n\nimport './App.css';\n\nimport { AgentApp } from './AgentApp';\nimport JenAvatar from './assets/jen-avatar.png';\nimport KevinAvatar from './assets/kevin-avatar.png';\nimport User1 from './assets/user1.png';\nimport { AgentHeader } from './components/AgentHeader/AgentHeader';\nimport { AgentLoading } from './components/AgentLoading/AgentLoading';\nimport { useChecklist } from './ChecklistTasks';\nimport { CustomerApp } from './CustomerApp';\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst apiKey = urlParams.get('apikey') || process.env.REACT_APP_STREAM_KEY;\nconst agentChannelId = `agent-demo-${uuidv4()}`;\nconst customerChannelId = `customer-demo-${uuidv4()}`;\nconst targetOrigin = urlParams.get('target_origin') || process.env.REACT_APP_TARGET_ORIGIN;\nconst theme = 'light';\n\nconst previousUserId = urlParams.get('user1') || process.env.REACT_APP_PREVIOUS_ID;\nconst previousUserToken = urlParams.get('user1_token') || process.env.REACT_APP_PREVIOUS_TOKEN;\n\nconst agentUserId = urlParams.get('user2') || process.env.REACT_APP_AGENT_ID;\nconst agentUserToken = urlParams.get('user2_token') || process.env.REACT_APP_AGENT_TOKEN;\n\nconst customerUserId = urlParams.get('user3') || process.env.REACT_APP_CUSTOMER_ID;\nconst customerUserToken = urlParams.get('user3_token') || process.env.REACT_APP_CUSTOMER_TOKEN;\n\nconst customerClient = StreamChat.getInstance(apiKey);\ncustomerClient.connectUser(\n  {\n    id: customerUserId,\n    name: 'Kevin Rosen',\n    image: KevinAvatar,\n    phone: '+1 (303) 555-1212',\n    email: 'kevin@example.com',\n  },\n  customerUserToken,\n);\n\nexport default function App() {\n\n  const [agentClient, setAgentClient] = useState();\n  const [initialClient, setInitialClient] = useState();\n  const [initialChannel, setInitialChannel] = useState();\n\n\n  /**\n   * Creates and watches a channel with a mock customer as the user\n   */\n  useEffect(() => {\n    const getInitialChannel = async () => {\n      const client = new StreamChat(apiKey); // since app is dual client need to construct an additional instance\n      await client.connectUser(\n        {\n          id: previousUserId,\n          name: 'Jen Alexander',\n          image: JenAvatar,\n          phone: '+1 (720) 555-1525',\n          email: 'jen@example.com',\n          role: 'moderator',\n        },\n        previousUserToken,\n      );\n      setInitialClient(client);\n\n      const newChannel = await client.channel('commerce', agentChannelId, {\n        image: JenAvatar,\n        name: 'Jen Alexander',\n        issue: 'Enterprise Inquiry',\n        subtitle: '#572 Enterprise Inquiry',\n      });\n\n      if (newChannel.state.messages.length) {\n        newChannel.state.clearMessages();\n      }\n\n      await newChannel.watch();\n\n      setInitialChannel(newChannel);\n    };\n\n    getInitialChannel();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  /**\n   * Sends messages to mock channel, disconnects mock channel, and sets\n   * support agent as current user\n   */\n  useEffect(() => {\n    const sendMessages = async () => {\n      await initialChannel.sendMessage({\n        text: 'I have a question about Enterprise',\n      });\n\n      await initialChannel.sendMessage({\n        text:\n          'My company is looking to upgrade our account to Enterprise. Can you provide me with some additional pricing information?',\n      });\n\n      await initialChannel.stopWatching();\n      await initialClient.disconnect();\n\n      const client = new StreamChat(apiKey); // since app is dual client need to construct an additional instance\n      await client.connectUser(\n        { id: agentUserId, name: 'Daniel Smith', image: User1 },\n        agentUserToken,\n      );\n\n      const [existingChannel] = await client.queryChannels({\n        id: agentChannelId,\n      });\n\n      await existingChannel.watch();\n\n      setAgentClient(client);\n    };\n\n    if (initialChannel && !initialChannel.state.messages.length) {\n      sendMessages();\n    }\n  }, [initialChannel]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  useChecklist(customerClient, targetOrigin);\n\n\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <SearchAndBackground/>\n      <SlideShow/>\n      <ActionMenu/>\n      <>\n      <div className='agent-wrapper'>\n        <AgentHeader />\n        {agentClient ? (\n          <Chat client={agentClient}>\n            <AgentApp {...{ agentChannelId, customerChannelId }} />\n          </Chat>\n        ) : (\n          <AgentLoading />\n        )}\n      </div>\n      {customerClient && (\n        <Chat client={customerClient} theme={`commerce ${theme}`}>\n          <CustomerApp {...{ customerChannelId }} />\n        </Chat>\n      )}\n    </>\n      <Contact/>}\n      <Footer/>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}